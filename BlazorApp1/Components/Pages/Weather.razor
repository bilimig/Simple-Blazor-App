@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control" @oninput="Input" placeholder="Filter by summary" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in displayedForecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>


    <p>Number of warm days: @warmDays</p>

    <button class="btn btn-primary" @onclick="WarmDaysFilter">Filter Days Below 15°C</button>

    <button class="btn btn-secondary" @onclick="Restore">Restore</button>
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[] displayedForecasts;
    private int warmDays;
    private string filterText = "";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 15).Select(index =>
        {
            int temperatureC = Random.Shared.Next(-20, 55);
            if (temperatureC > 15)
            {
                warmDays++;
            }
            return new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = temperatureC,
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            };
        }).ToArray();

        displayedForecasts = forecasts;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void WarmDaysFilter()
    {
        displayedForecasts = forecasts.Where(forecast => forecast.TemperatureC > 15).ToArray();
        StateHasChanged();
    }

    private void Restore()
    {
        displayedForecasts = forecasts;
        StateHasChanged();
    }

    private void Input(ChangeEventArgs arg)
    {
        filterText = arg.Value?.ToString() ?? "";
        FilterBySummary();
    }

    private void FilterBySummary()
    {
        if (!string.IsNullOrWhiteSpace(filterText))
        {
            displayedForecasts = displayedForecasts.Where(f => f.Summary?.Contains(filterText, StringComparison.OrdinalIgnoreCase) ?? false).ToArray();
        }
        else
        {
            displayedForecasts = forecasts;
        }

        StateHasChanged();
    }
}